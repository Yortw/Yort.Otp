### YamlMime:ManagedReference
items:
- uid: Yort.Otp.OnetimePasswordGeneratorBase
  commentId: T:Yort.Otp.OnetimePasswordGeneratorBase
  id: OnetimePasswordGeneratorBase
  parent: Yort.Otp
  children:
  - Yort.Otp.OnetimePasswordGeneratorBase.#ctor
  - Yort.Otp.OnetimePasswordGeneratorBase.#ctor
  - Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean)
  - Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean)
  - Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean,System.Byte[])
  - Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean,System.Byte[])
  - Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  - Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  - Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  - Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  - Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  - Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  - Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  - Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  - Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  - Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  - Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  - Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  - Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  - Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  langs:
  - csharp
  - vb
  name: OnetimePasswordGeneratorBase
  nameWithType: OnetimePasswordGeneratorBase
  fullName: Yort.Otp.OnetimePasswordGeneratorBase
  type: Class
  source:
    id: OnetimePasswordGeneratorBase
    path: ''
    startLine: 1585
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nBase cass used for onetime password generators, provides re-use as well as a &quot;versionable&quot; common interface.\n"
  example: []
  syntax:
    content: 'public abstract class OnetimePasswordGeneratorBase : IOnetimePasswordGenerator, IDisposable'
    content.vb: >-
      Public MustInherit Class OnetimePasswordGeneratorBase
          Implements IOnetimePasswordGenerator, IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - Yort.Otp.CounterBasedPasswordGenerator
  - Yort.Otp.TimeBasedPasswordGenerator
  implements:
  - Yort.Otp.IOnetimePasswordGenerator
  - IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Yort.Otp.OnetimePasswordGeneratorBase.#ctor
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.#ctor
  id: '#ctor'
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: OnetimePasswordGeneratorBase()
  nameWithType: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase()
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 395
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nDefault constructor\n"
  remarks: "\n<p>Initialises the instance so it will erase assigned secrets on dispose or change of secret, and with no current secret allocated.</p>\n"
  example: []
  syntax:
    content: protected OnetimePasswordGeneratorBase()
    content.vb: Protected Sub New
  overload: Yort.Otp.OnetimePasswordGeneratorBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: OnetimePasswordGeneratorBase(Boolean)
  nameWithType: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(Boolean)
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 407
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nPartial constructor.\n"
  remarks: "\n<p>Use this if you are keeping secrets in memory and using them outside of class instances from this library, in which case <code data-dev-comment-type=\"paramref\" class=\"paramref\">eraseSecrets</code> should be false to prevent the data from being overwritten unexpectedly.</p>\n"
  example: []
  syntax:
    content: protected OnetimePasswordGeneratorBase(bool eraseSecrets)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: If true, secrets asssigned are overwritten with zero value bytes when this instance is disposed, or if a new secret is assigned. This *helps* *reduce* the chance of secrets ending up in swap files or being scraped from RAM.
    content.vb: Protected Sub New(eraseSecrets As Boolean)
  overload: Yort.Otp.OnetimePasswordGeneratorBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean,System.Byte[])
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean,System.Byte[])
  id: '#ctor(System.Boolean,System.Byte[])'
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: OnetimePasswordGeneratorBase(Boolean, Byte[])
  nameWithType: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(Boolean, Byte[])
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(System.Boolean, System.Byte[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 420
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nFull constructor, initialises this instance with an already known secret.\n"
  remarks: "\n<p>If you are keeping secrets in memory and using them outside of class instances from this library, <code data-dev-comment-type=\"paramref\" class=\"paramref\">eraseSecrets</code> should be false to prevent the data from being overwritten unexpectedly.</p>\n"
  example: []
  syntax:
    content: protected OnetimePasswordGeneratorBase(bool eraseSecrets, byte[] secret)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: If true, secrets asssigned are overwritten with zero value bytes when this instance is disposed, or if a new secret is assigned. This *helps* *reduce* the chance of secrets ending up in swap files or being scraped from RAM.
    - id: secret
      type: System.Byte[]
      description: A byte array containign the secret to use for generating passwords.
    content.vb: Protected Sub New(eraseSecrets As Boolean, secret As Byte())
  overload: Yort.Otp.OnetimePasswordGeneratorBase.#ctor*
  nameWithType.vb: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(Boolean, Byte())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(System.Boolean, System.Byte())
  name.vb: OnetimePasswordGeneratorBase(Boolean, Byte())
- uid: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  id: HashAlgorithm
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: HashAlgorithm
  nameWithType: OnetimePasswordGeneratorBase.HashAlgorithm
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  type: Property
  source:
    id: HashAlgorithm
    path: ''
    startLine: 436
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or rturns an <xref href=\"Yort.Otp.IHashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> implementation used to generate onetime passwords.\n"
  example: []
  syntax:
    content: public IHashAlgorithm HashAlgorithm { get; set; }
    parameters: []
    return:
      type: Yort.Otp.IHashAlgorithm
    content.vb: Public Property HashAlgorithm As IHashAlgorithm
  overload: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm*
  seealso:
  - linkId: Yort.Otp.Sha1HashAlgorithm
    commentId: T:Yort.Otp.Sha1HashAlgorithm
  - linkId: Yort.Otp.Sha256HashAlgorithm
    commentId: T:Yort.Otp.Sha256HashAlgorithm
  - linkId: Yort.Otp.Sha512HashAlgorithm
    commentId: T:Yort.Otp.Sha512HashAlgorithm
  - linkId: Yort.Otp.MD5HashAlgorithm
    commentId: T:Yort.Otp.MD5HashAlgorithm
  implements:
  - Yort.Otp.IOnetimePasswordGenerator.HashAlgorithm
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  id: IsDisposed
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: OnetimePasswordGeneratorBase.IsDisposed
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  type: Property
  source:
    id: IsDisposed
    path: ''
    startLine: 453
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a boolean indicating whether or not this instance has been disposed.\n"
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
    commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  id: PasswordLength
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: PasswordLength
  nameWithType: OnetimePasswordGeneratorBase.PasswordLength
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  type: Property
  source:
    id: PasswordLength
    path: ''
    startLine: 468
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns length of the password to generate.\n"
  remarks: "\n<p>Allowed values are 1 through 8, though 6 is the default and 8 is the other commonly used values. Other values are discouraged and may not be supported by other standardised systems.</p>\n"
  example: []
  syntax:
    content: public int PasswordLength { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property PasswordLength As Integer
  overload: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength*
  implements:
  - Yort.Otp.IOnetimePasswordGenerator.PasswordLength
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  id: MovingFactor
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: MovingFactor
  nameWithType: OnetimePasswordGeneratorBase.MovingFactor
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  type: Property
  source:
    id: MovingFactor
    path: ''
    startLine: 484
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns a 64 bit integer which is the value that changes over time (either literally, or on some even such as a successful login) which is converted into a onetime password.\n"
  example: []
  syntax:
    content: protected virtual Int64 MovingFactor { get; set; }
    parameters: []
    return:
      type: Int64
    content.vb: Protected Overridable Property MovingFactor As Int64
  overload: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor*
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
- uid: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  id: GeneratedPassword
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: GeneratedPassword
  nameWithType: OnetimePasswordGeneratorBase.GeneratedPassword
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  type: Property
  source:
    id: GeneratedPassword
    path: ''
    startLine: 504
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns the password generated for the current <xref href=\"Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor\" data-throw-if-not-resolved=\"false\"></xref> using the provided secret and <xref href=\"Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string GeneratedPassword { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property GeneratedPassword As String
  overload: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword*
  see:
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
    commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
    commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
    commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
    commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  implements:
  - Yort.Otp.IOnetimePasswordGenerator.GeneratedPassword
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: OnetimePasswordGeneratorBase.Dispose(Boolean)
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 520
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nUsed by derived classes to clean up resources held by the base class.\n"
  remarks: "\n<p>If the instance was constructed with the eraseSecrets argument set to true, the currently assigned secret will be overwritten in memory with zeros.</p>\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
      description: True if dispose is being explicitly called from code, false if it is being called from a destructor.
    content.vb: Protected Overridable Sub Dispose(isDisposing As Boolean)
  overload: Yort.Otp.OnetimePasswordGeneratorBase.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  id: SetSecret(System.Byte[])
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: SetSecret(Byte[])
  nameWithType: OnetimePasswordGeneratorBase.SetSecret(Byte[])
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  type: Method
  source:
    id: SetSecret
    path: ''
    startLine: 536
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets the secret used to generate passwords.\n"
  remarks: "\n<p>If the instance was constructed with the eraseSecrets argument set to true, any existing secret will be overwritten in memory with zeros.</p>\n"
  example: []
  syntax:
    content: public void SetSecret(byte[] secret)
    parameters:
    - id: secret
      type: System.Byte[]
      description: A byte array containing the secret value used with the <xref href="Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm" data-throw-if-not-resolved="false"></xref> to generate onetime passwords.
    content.vb: Public Sub SetSecret(secret As Byte())
  overload: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret*
  implements:
  - Yort.Otp.IOnetimePasswordGenerator.SetSecret(System.Byte[])
  nameWithType.vb: OnetimePasswordGeneratorBase.SetSecret(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte())
  name.vb: SetSecret(Byte())
- uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  id: Dispose
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: OnetimePasswordGeneratorBase.Dispose()
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose()
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 551
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nDisposes this class and any internal resources.\n"
  remarks: "\n<p>If the instance was constructed with the eraseSecrets argument set to true, any existing secret will be overwritten in memory with zeros.</p>\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Yort.Otp.OnetimePasswordGeneratorBase.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Otp.OnetimePasswordGeneratorBase.#ctor
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.#ctor
  id: '#ctor'
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: OnetimePasswordGeneratorBase()
  nameWithType: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase()
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1606
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nDefault constructor\n"
  remarks: "\n<p>Initialises the instance so it will erase assigned secrets on dispose or change of secret, and with no current secret allocated.</p>\n"
  example: []
  syntax:
    content: protected OnetimePasswordGeneratorBase()
    content.vb: Protected Sub New
  overload: Yort.Otp.OnetimePasswordGeneratorBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: OnetimePasswordGeneratorBase(Boolean)
  nameWithType: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(Boolean)
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1617
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nPartial constructor.\n"
  remarks: "\n<p>Use this if you are keeping secrets in memory and using them outside of class instances from this library, in which case <code data-dev-comment-type=\"paramref\" class=\"paramref\">eraseSecrets</code> should be false to prevent the data from being overwritten unexpectedly.</p>\n"
  example: []
  syntax:
    content: protected OnetimePasswordGeneratorBase(bool eraseSecrets)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: If true, secrets asssigned are overwritten with zero value bytes when this instance is disposed, or if a new secret is assigned. This *helps* *reduce* the chance of secrets ending up in swap files or being scraped from RAM.
    content.vb: Protected Sub New(eraseSecrets As Boolean)
  overload: Yort.Otp.OnetimePasswordGeneratorBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean,System.Byte[])
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.#ctor(System.Boolean,System.Byte[])
  id: '#ctor(System.Boolean,System.Byte[])'
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: OnetimePasswordGeneratorBase(Boolean, Byte[])
  nameWithType: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(Boolean, Byte[])
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(System.Boolean, System.Byte[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1631
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nFull constructor, initialises this instance with an already known secret.\n"
  remarks: "\n<p>If you are keeping secrets in memory and using them outside of class instances from this library, <code data-dev-comment-type=\"paramref\" class=\"paramref\">eraseSecrets</code> should be false to prevent the data from being overwritten unexpectedly.</p>\n"
  example: []
  syntax:
    content: protected OnetimePasswordGeneratorBase(bool eraseSecrets, byte[] secret)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: If true, secrets asssigned are overwritten with zero value bytes when this instance is disposed, or if a new secret is assigned. This *helps* *reduce* the chance of secrets ending up in swap files or being scraped from RAM.
    - id: secret
      type: System.Byte[]
      description: A byte array containign the secret to use for generating passwords.
    content.vb: Protected Sub New(eraseSecrets As Boolean, secret As Byte())
  overload: Yort.Otp.OnetimePasswordGeneratorBase.#ctor*
  nameWithType.vb: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(Boolean, Byte())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase(System.Boolean, System.Byte())
  name.vb: OnetimePasswordGeneratorBase(Boolean, Byte())
- uid: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  id: HashAlgorithm
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: HashAlgorithm
  nameWithType: OnetimePasswordGeneratorBase.HashAlgorithm
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  type: Property
  source:
    id: HashAlgorithm
    path: ''
    startLine: 1657
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or rturns an <xref href=\"Yort.Otp.IHashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> implementation used to generate onetime passwords.\n"
  example: []
  syntax:
    content: public IHashAlgorithm HashAlgorithm { get; set; }
    parameters: []
    return:
      type: Yort.Otp.IHashAlgorithm
    content.vb: Public Property HashAlgorithm As IHashAlgorithm
  overload: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm*
  seealso:
  - linkId: Yort.Otp.Sha1HashAlgorithm
    commentId: T:Yort.Otp.Sha1HashAlgorithm
  - linkId: Yort.Otp.Sha256HashAlgorithm
    commentId: T:Yort.Otp.Sha256HashAlgorithm
  - linkId: Yort.Otp.Sha512HashAlgorithm
    commentId: T:Yort.Otp.Sha512HashAlgorithm
  - linkId: Yort.Otp.MD5HashAlgorithm
    commentId: T:Yort.Otp.MD5HashAlgorithm
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  id: IsDisposed
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: OnetimePasswordGeneratorBase.IsDisposed
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  type: Property
  source:
    id: IsDisposed
    path: ''
    startLine: 1673
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a boolean indicating whether or not this instance has been disposed.\n"
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
    commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  id: PasswordLength
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: PasswordLength
  nameWithType: OnetimePasswordGeneratorBase.PasswordLength
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  type: Property
  source:
    id: PasswordLength
    path: ''
    startLine: 1681
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns length of the password to generate.\n"
  remarks: "\n<p>Allowed values are 1 through 8, though 6 is the default and 8 is the other commonly used values. Other values are discouraged and may not be supported by other standardised systems.</p>\n"
  example: []
  syntax:
    content: public int PasswordLength { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property PasswordLength As Integer
  overload: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  id: MovingFactor
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: MovingFactor
  nameWithType: OnetimePasswordGeneratorBase.MovingFactor
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  type: Property
  source:
    id: MovingFactor
    path: ''
    startLine: 1695
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns a 64 bit integer which is the value that changes over time (either literally, or on some even such as a successful login) which is converted into a onetime password.\n"
  example: []
  syntax:
    content: protected virtual Int64 MovingFactor { get; set; }
    parameters: []
    return:
      type: Int64
    content.vb: Protected Overridable Property MovingFactor As Int64
  overload: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor*
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
- uid: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  id: GeneratedPassword
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: GeneratedPassword
  nameWithType: OnetimePasswordGeneratorBase.GeneratedPassword
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  type: Property
  source:
    id: GeneratedPassword
    path: ''
    startLine: 1708
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns the password generated for the current <xref href=\"Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor\" data-throw-if-not-resolved=\"false\"></xref> using the provided secret and <xref href=\"Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string GeneratedPassword { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property GeneratedPassword As String
  overload: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword*
  see:
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
    commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
    commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
    commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  - linkId: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
    commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: OnetimePasswordGeneratorBase.Dispose(Boolean)
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 1739
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nUsed by derived classes to clean up resources held by the base class.\n"
  remarks: "\n<p>If the instance was constructed with the eraseSecrets argument set to true, the currently assigned secret will be overwritten in memory with zeros.</p>\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
      description: True if dispose is being explicitly called from code, false if it is being called from a destructor.
    content.vb: Protected Overridable Sub Dispose(isDisposing As Boolean)
  overload: Yort.Otp.OnetimePasswordGeneratorBase.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  id: SetSecret(System.Byte[])
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: SetSecret(Byte[])
  nameWithType: OnetimePasswordGeneratorBase.SetSecret(Byte[])
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  type: Method
  source:
    id: SetSecret
    path: ''
    startLine: 1762
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets the secret used to generate passwords.\n"
  remarks: "\n<p>If the instance was constructed with the eraseSecrets argument set to true, any existing secret will be overwritten in memory with zeros.</p>\n"
  example: []
  syntax:
    content: public void SetSecret(byte[] secret)
    parameters:
    - id: secret
      type: System.Byte[]
      description: A byte array containing the secret value used with the <xref href="Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm" data-throw-if-not-resolved="false"></xref> to generate onetime passwords.
    content.vb: Public Sub SetSecret(secret As Byte())
  overload: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret*
  nameWithType.vb: OnetimePasswordGeneratorBase.SetSecret(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte())
  name.vb: SetSecret(Byte())
- uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  id: Dispose
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: OnetimePasswordGeneratorBase.Dispose()
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose()
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 1799
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nDisposes this class and any internal resources.\n"
  remarks: "\n<p>If the instance was constructed with the eraseSecrets argument set to true, any existing secret will be overwritten in memory with zeros.</p>\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Yort.Otp.OnetimePasswordGeneratorBase.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Yort.Otp
  commentId: N:Yort.Otp
  isExternal: false
  name: Yort.Otp
  nameWithType: Yort.Otp
  fullName: Yort.Otp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Yort.Otp.IOnetimePasswordGenerator
  commentId: T:Yort.Otp.IOnetimePasswordGenerator
  parent: Yort.Otp
  isExternal: false
  name: IOnetimePasswordGenerator
  nameWithType: IOnetimePasswordGenerator
  fullName: Yort.Otp.IOnetimePasswordGenerator
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Otp.OnetimePasswordGeneratorBase.#ctor*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorBase.#ctor
  isExternal: false
  name: OnetimePasswordGeneratorBase
  nameWithType: OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.OnetimePasswordGeneratorBase
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Yort.Otp.IHashAlgorithm
  commentId: T:Yort.Otp.IHashAlgorithm
  parent: Yort.Otp
  isExternal: false
  name: IHashAlgorithm
  nameWithType: IHashAlgorithm
  fullName: Yort.Otp.IHashAlgorithm
- uid: Yort.Otp.Sha1HashAlgorithm
  commentId: T:Yort.Otp.Sha1HashAlgorithm
  isExternal: false
  name: Sha1HashAlgorithm
  nameWithType: Sha1HashAlgorithm
  fullName: Yort.Otp.Sha1HashAlgorithm
- uid: Yort.Otp.Sha256HashAlgorithm
  commentId: T:Yort.Otp.Sha256HashAlgorithm
  isExternal: false
  name: Sha256HashAlgorithm
  nameWithType: Sha256HashAlgorithm
  fullName: Yort.Otp.Sha256HashAlgorithm
- uid: Yort.Otp.Sha512HashAlgorithm
  commentId: T:Yort.Otp.Sha512HashAlgorithm
  isExternal: false
  name: Sha512HashAlgorithm
  nameWithType: Sha512HashAlgorithm
  fullName: Yort.Otp.Sha512HashAlgorithm
- uid: Yort.Otp.MD5HashAlgorithm
  commentId: T:Yort.Otp.MD5HashAlgorithm
  isExternal: false
  name: MD5HashAlgorithm
  nameWithType: MD5HashAlgorithm
  fullName: Yort.Otp.MD5HashAlgorithm
- uid: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  isExternal: false
  name: HashAlgorithm
  nameWithType: OnetimePasswordGeneratorBase.HashAlgorithm
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
- uid: Yort.Otp.IOnetimePasswordGenerator.HashAlgorithm
  commentId: P:Yort.Otp.IOnetimePasswordGenerator.HashAlgorithm
  parent: Yort.Otp.IOnetimePasswordGenerator
  isExternal: false
  name: HashAlgorithm
  nameWithType: IOnetimePasswordGenerator.HashAlgorithm
  fullName: Yort.Otp.IOnetimePasswordGenerator.HashAlgorithm
- uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: Dispose()
  nameWithType: OnetimePasswordGeneratorBase.Dispose()
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose()
  spec.csharp:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
    name: Dispose
    nameWithType: OnetimePasswordGeneratorBase.Dispose
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
    name: Dispose
    nameWithType: OnetimePasswordGeneratorBase.Dispose
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  isExternal: false
  name: IsDisposed
  nameWithType: OnetimePasswordGeneratorBase.IsDisposed
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
- uid: Yort.Otp.OnetimePasswordGeneratorBase
  commentId: T:Yort.Otp.OnetimePasswordGeneratorBase
  parent: Yort.Otp
  isExternal: false
  name: OnetimePasswordGeneratorBase
  nameWithType: OnetimePasswordGeneratorBase
  fullName: Yort.Otp.OnetimePasswordGeneratorBase
- uid: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  isExternal: false
  name: PasswordLength
  nameWithType: OnetimePasswordGeneratorBase.PasswordLength
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
- uid: Yort.Otp.IOnetimePasswordGenerator.PasswordLength
  commentId: P:Yort.Otp.IOnetimePasswordGenerator.PasswordLength
  parent: Yort.Otp.IOnetimePasswordGenerator
  isExternal: false
  name: PasswordLength
  nameWithType: IOnetimePasswordGenerator.PasswordLength
  fullName: Yort.Otp.IOnetimePasswordGenerator.PasswordLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  isExternal: false
  name: MovingFactor
  nameWithType: OnetimePasswordGeneratorBase.MovingFactor
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
- uid: Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: Int64
- uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: true
  name: SetSecret(Byte[])
  nameWithType: OnetimePasswordGeneratorBase.SetSecret(Byte[])
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  nameWithType.vb: OnetimePasswordGeneratorBase.SetSecret(Byte())
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte())
  name.vb: SetSecret(Byte())
  spec.csharp:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
    name: SetSecret
    nameWithType: OnetimePasswordGeneratorBase.SetSecret
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
    name: SetSecret
    nameWithType: OnetimePasswordGeneratorBase.SetSecret
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: HashAlgorithm
  nameWithType: OnetimePasswordGeneratorBase.HashAlgorithm
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
- uid: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: PasswordLength
  nameWithType: OnetimePasswordGeneratorBase.PasswordLength
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
- uid: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: MovingFactor
  nameWithType: OnetimePasswordGeneratorBase.MovingFactor
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
- uid: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  isExternal: false
  name: GeneratedPassword
  nameWithType: OnetimePasswordGeneratorBase.GeneratedPassword
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
- uid: Yort.Otp.IOnetimePasswordGenerator.GeneratedPassword
  commentId: P:Yort.Otp.IOnetimePasswordGenerator.GeneratedPassword
  parent: Yort.Otp.IOnetimePasswordGenerator
  isExternal: false
  name: GeneratedPassword
  nameWithType: IOnetimePasswordGenerator.GeneratedPassword
  fullName: Yort.Otp.IOnetimePasswordGenerator.GeneratedPassword
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  isExternal: false
  name: Dispose
  nameWithType: OnetimePasswordGeneratorBase.Dispose
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
- uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorBase.SetSecret
  isExternal: false
  name: SetSecret
  nameWithType: OnetimePasswordGeneratorBase.SetSecret
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret
- uid: Yort.Otp.IOnetimePasswordGenerator.SetSecret(System.Byte[])
  commentId: M:Yort.Otp.IOnetimePasswordGenerator.SetSecret(System.Byte[])
  parent: Yort.Otp.IOnetimePasswordGenerator
  isExternal: true
  name: SetSecret(Byte[])
  nameWithType: IOnetimePasswordGenerator.SetSecret(Byte[])
  fullName: Yort.Otp.IOnetimePasswordGenerator.SetSecret(System.Byte[])
  nameWithType.vb: IOnetimePasswordGenerator.SetSecret(Byte())
  fullName.vb: Yort.Otp.IOnetimePasswordGenerator.SetSecret(System.Byte())
  name.vb: SetSecret(Byte())
  spec.csharp:
  - uid: Yort.Otp.IOnetimePasswordGenerator.SetSecret(System.Byte[])
    name: SetSecret
    nameWithType: IOnetimePasswordGenerator.SetSecret
    fullName: Yort.Otp.IOnetimePasswordGenerator.SetSecret
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Otp.IOnetimePasswordGenerator.SetSecret(System.Byte[])
    name: SetSecret
    nameWithType: IOnetimePasswordGenerator.SetSecret
    fullName: Yort.Otp.IOnetimePasswordGenerator.SetSecret
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
