### YamlMime:ManagedReference
items:
- uid: Yort.Otp.TimeBasedPasswordGenerator
  commentId: T:Yort.Otp.TimeBasedPasswordGenerator
  id: TimeBasedPasswordGenerator
  parent: Yort.Otp
  children:
  - Yort.Otp.TimeBasedPasswordGenerator.#ctor
  - Yort.Otp.TimeBasedPasswordGenerator.#ctor
  - Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean)
  - Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean)
  - Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean,System.Byte[])
  - Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean,System.Byte[])
  - Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  - Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  - Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  - Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  - Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  - Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  - Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  - Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  langs:
  - csharp
  - vb
  name: TimeBasedPasswordGenerator
  nameWithType: TimeBasedPasswordGenerator
  fullName: Yort.Otp.TimeBasedPasswordGenerator
  type: Class
  source:
    id: TimeBasedPasswordGenerator
    path: ''
    startLine: 2232
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nUsed to generate passwords based on a specific time, using the <see cref=\"!:https://tools.ietf.org/html/rfc6238\">rfc6238 specification</see> for TOTP.\n"
  remarks: "\n<p>Default values are SHA1, a 30 second time interval and a password length of 6. The current time from the device&apos;s clock is used (dynamically) to create the password, so the <xref href=\"Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword\" data-throw-if-not-resolved=\"false\"></xref> property will change over time.</p>\n<p>\n<pre><code>//Configures a password generator using a base 32 secret (as typically provided by Google).\nvar passwordGenerator = new TimeBasedPassword();\npasswordGenerator.SetSecret(TimeBasedPassword.SecretFromBase32String(&quot;JBSWY3DPEHPK3PXP&quot;));\nvar password = passwordGenerator.GeneratedPassword;</code></pre>\n</p>\n"
  example: []
  syntax:
    content: 'public sealed class TimeBasedPasswordGenerator : OnetimePasswordGeneratorBase, IOnetimePasswordGenerator, IDisposable'
    content.vb: >-
      Public NotInheritable Class TimeBasedPasswordGenerator
          Inherits OnetimePasswordGeneratorBase
          Implements IOnetimePasswordGenerator, IDisposable
  inheritance:
  - System.Object
  - Yort.Otp.OnetimePasswordGeneratorBase
  implements:
  - Yort.Otp.IOnetimePasswordGenerator
  - IDisposable
  inheritedMembers:
  - Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  - Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  - Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  - Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  - Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  - Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  - Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Yort.Otp.TimeBasedPasswordGenerator.#ctor
  commentId: M:Yort.Otp.TimeBasedPasswordGenerator.#ctor
  id: '#ctor'
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: TimeBasedPasswordGenerator()
  nameWithType: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator()
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 881
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nDefault constructor\n"
  remarks: "\n<p>Initialises the instance so it will erase assigned secrets on dispose or change of secret, and with no current secret allocated.</p>\n"
  example: []
  syntax:
    content: public TimeBasedPasswordGenerator()
    content.vb: Public Sub New
  overload: Yort.Otp.TimeBasedPasswordGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean)
  commentId: M:Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: TimeBasedPasswordGenerator(Boolean)
  nameWithType: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(Boolean)
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 893
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nPartial constructor.\n"
  remarks: "\n<p>Use this if you are keeping secrets in memory and using them outside of class instances from this library, in which case <code data-dev-comment-type=\"paramref\" class=\"paramref\">eraseSecrets</code> should be false to prevent the data from being overwritten unexpectedly.</p>\n"
  example: []
  syntax:
    content: public TimeBasedPasswordGenerator(bool eraseSecrets)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: If true, secrets asssigned are overwritten with zero value bytes when this instance is disposed, or if a new secret is assigned. This *helps* *reduce* the chance of secrets ending up in swap files or being scraped from RAM.
    content.vb: Public Sub New(eraseSecrets As Boolean)
  overload: Yort.Otp.TimeBasedPasswordGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean,System.Byte[])
  commentId: M:Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean,System.Byte[])
  id: '#ctor(System.Boolean,System.Byte[])'
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: TimeBasedPasswordGenerator(Boolean, Byte[])
  nameWithType: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(Boolean, Byte[])
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(System.Boolean, System.Byte[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 906
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nFull constructor, initialises this instance with an already known secret.\n"
  remarks: "\n<p>If you are keeping secrets in memory and using them outside of class instances from this library, <code data-dev-comment-type=\"paramref\" class=\"paramref\">eraseSecrets</code> should be false to prevent the data from being overwritten unexpectedly.</p>\n"
  example: []
  syntax:
    content: public TimeBasedPasswordGenerator(bool eraseSecrets, byte[] secret)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: If true, secrets asssigned are overwritten with zero value bytes when this instance is disposed, or if a new secret is assigned. This *helps* *reduce* the chance of secrets ending up in swap files or being scraped from RAM.
    - id: secret
      type: System.Byte[]
      description: A byte array containign the secret to use for generating passwords.
    content.vb: Public Sub New(eraseSecrets As Boolean, secret As Byte())
  overload: Yort.Otp.TimeBasedPasswordGenerator.#ctor*
  nameWithType.vb: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(Boolean, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(System.Boolean, System.Byte())
  name.vb: TimeBasedPasswordGenerator(Boolean, Byte())
- uid: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  id: TimeInterval
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: TimeInterval
  nameWithType: TimeBasedPasswordGenerator.TimeInterval
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  type: Property
  source:
    id: TimeInterval
    path: ''
    startLine: 918
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns the amount of time each generated password is valid for. The default is 30 seconds.\n"
  example: []
  syntax:
    content: public TimeSpan TimeInterval { get; set; }
    parameters: []
    return:
      type: TimeSpan
    content.vb: Public Property TimeInterval As TimeSpan
  overload: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  id: Timestamp
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: TimeBasedPasswordGenerator.Timestamp
  fullName: Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  type: Property
  source:
    id: Timestamp
    path: ''
    startLine: 934
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns the date and time to calculate a password for. If null, the current date and time from the device/OS clock is used.\n"
  example: []
  syntax:
    content: public DateTime? Timestamp { get; set; }
    parameters: []
    return:
      type: System.Nullable{DateTime}
    content.vb: Public Property Timestamp As DateTime?
  overload: Yort.Otp.TimeBasedPasswordGenerator.Timestamp*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  id: ValidUntilUtc
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: ValidUntilUtc
  nameWithType: TimeBasedPasswordGenerator.ValidUntilUtc
  fullName: Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  type: Property
  source:
    id: ValidUntilUtc
    path: ''
    startLine: 950
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns the last second at which the value of <xref href=\"Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword\" data-throw-if-not-resolved=\"false\"></xref> is valid until.\n"
  example: []
  syntax:
    content: public DateTime ValidUntilUtc { get; }
    parameters: []
    return:
      type: DateTime
    content.vb: Public ReadOnly Property ValidUntilUtc As DateTime
  overload: Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  id: MovingFactor
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: MovingFactor
  nameWithType: TimeBasedPasswordGenerator.MovingFactor
  fullName: Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  type: Property
  source:
    id: MovingFactor
    path: ''
    startLine: 962
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nUses the <xref href=\"Yort.Otp.TimeBasedPasswordGenerator.Timestamp\" data-throw-if-not-resolved=\"false\"></xref> or current clock time and <xref href=\"Yort.Otp.TimeBasedPasswordGenerator.TimeInterval\" data-throw-if-not-resolved=\"false\"></xref> to generate the counter/moving factor for password generation.\n"
  example: []
  syntax:
    content: protected override long MovingFactor { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Protected Overrides Property MovingFactor As Long
  overridden: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  overload: Yort.Otp.TimeBasedPasswordGenerator.MovingFactor*
  modifiers.csharp:
  - protected
  - override
  - get
  - set
  modifiers.vb:
  - Protected
  - Overrides
- uid: Yort.Otp.TimeBasedPasswordGenerator.#ctor
  commentId: M:Yort.Otp.TimeBasedPasswordGenerator.#ctor
  id: '#ctor'
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: TimeBasedPasswordGenerator()
  nameWithType: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator()
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 2253
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nDefault constructor\n"
  remarks: "\n<p>Initialises the instance so it will erase assigned secrets on dispose or change of secret, and with no current secret allocated.</p>\n"
  example: []
  syntax:
    content: public TimeBasedPasswordGenerator()
    content.vb: Public Sub New
  overload: Yort.Otp.TimeBasedPasswordGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean)
  commentId: M:Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: TimeBasedPasswordGenerator(Boolean)
  nameWithType: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(Boolean)
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 2264
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nPartial constructor.\n"
  remarks: "\n<p>Use this if you are keeping secrets in memory and using them outside of class instances from this library, in which case <code data-dev-comment-type=\"paramref\" class=\"paramref\">eraseSecrets</code> should be false to prevent the data from being overwritten unexpectedly.</p>\n"
  example: []
  syntax:
    content: public TimeBasedPasswordGenerator(bool eraseSecrets)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: If true, secrets asssigned are overwritten with zero value bytes when this instance is disposed, or if a new secret is assigned. This *helps* *reduce* the chance of secrets ending up in swap files or being scraped from RAM.
    content.vb: Public Sub New(eraseSecrets As Boolean)
  overload: Yort.Otp.TimeBasedPasswordGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean,System.Byte[])
  commentId: M:Yort.Otp.TimeBasedPasswordGenerator.#ctor(System.Boolean,System.Byte[])
  id: '#ctor(System.Boolean,System.Byte[])'
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: TimeBasedPasswordGenerator(Boolean, Byte[])
  nameWithType: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(Boolean, Byte[])
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(System.Boolean, System.Byte[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 2276
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nFull constructor, initialises this instance with an already known secret.\n"
  remarks: "\n<p>If you are keeping secrets in memory and using them outside of class instances from this library, <code data-dev-comment-type=\"paramref\" class=\"paramref\">eraseSecrets</code> should be false to prevent the data from being overwritten unexpectedly.</p>\n"
  example: []
  syntax:
    content: public TimeBasedPasswordGenerator(bool eraseSecrets, byte[] secret)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: If true, secrets asssigned are overwritten with zero value bytes when this instance is disposed, or if a new secret is assigned. This *helps* *reduce* the chance of secrets ending up in swap files or being scraped from RAM.
    - id: secret
      type: System.Byte[]
      description: A byte array containign the secret to use for generating passwords.
    content.vb: Public Sub New(eraseSecrets As Boolean, secret As Byte())
  overload: Yort.Otp.TimeBasedPasswordGenerator.#ctor*
  nameWithType.vb: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(Boolean, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator(System.Boolean, System.Byte())
  name.vb: TimeBasedPasswordGenerator(Boolean, Byte())
- uid: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  id: TimeInterval
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: TimeInterval
  nameWithType: TimeBasedPasswordGenerator.TimeInterval
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  type: Property
  source:
    id: TimeInterval
    path: ''
    startLine: 2288
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns the amount of time each generated password is valid for. The default is 30 seconds.\n"
  example: []
  syntax:
    content: public TimeSpan TimeInterval { get; set; }
    parameters: []
    return:
      type: TimeSpan
    content.vb: Public Property TimeInterval As TimeSpan
  overload: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  id: Timestamp
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: TimeBasedPasswordGenerator.Timestamp
  fullName: Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  type: Property
  source:
    id: Timestamp
    path: ''
    startLine: 2301
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns the date and time to calculate a password for. If null, the current date and time from the device/OS clock is used.\n"
  example: []
  syntax:
    content: public DateTime? Timestamp { get; set; }
    parameters: []
    return:
      type: System.Nullable{DateTime}
    content.vb: Public Property Timestamp As DateTime?
  overload: Yort.Otp.TimeBasedPasswordGenerator.Timestamp*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  id: ValidUntilUtc
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: ValidUntilUtc
  nameWithType: TimeBasedPasswordGenerator.ValidUntilUtc
  fullName: Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  type: Property
  source:
    id: ValidUntilUtc
    path: ''
    startLine: 2306
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nSets or returns the last second at which the value of <xref href=\"Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword\" data-throw-if-not-resolved=\"false\"></xref> is valid until.\n"
  example: []
  syntax:
    content: public DateTime ValidUntilUtc { get; }
    parameters: []
    return:
      type: DateTime
    content.vb: Public ReadOnly Property ValidUntilUtc As DateTime
  overload: Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  id: MovingFactor
  parent: Yort.Otp.TimeBasedPasswordGenerator
  langs:
  - csharp
  - vb
  name: MovingFactor
  nameWithType: TimeBasedPasswordGenerator.MovingFactor
  fullName: Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  type: Property
  source:
    id: MovingFactor
    path: ''
    startLine: 2317
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nUses the <xref href=\"Yort.Otp.TimeBasedPasswordGenerator.Timestamp\" data-throw-if-not-resolved=\"false\"></xref> or current clock time and <xref href=\"Yort.Otp.TimeBasedPasswordGenerator.TimeInterval\" data-throw-if-not-resolved=\"false\"></xref> to generate the counter/moving factor for password generation.\n"
  example: []
  syntax:
    content: protected override long MovingFactor { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Protected Overrides Property MovingFactor As Long
  overridden: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  overload: Yort.Otp.TimeBasedPasswordGenerator.MovingFactor*
  modifiers.csharp:
  - protected
  - override
  - get
  - set
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: GeneratedPassword
  nameWithType: OnetimePasswordGeneratorBase.GeneratedPassword
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.GeneratedPassword
- uid: Yort.Otp
  commentId: N:Yort.Otp
  isExternal: false
  name: Yort.Otp
  nameWithType: Yort.Otp
  fullName: Yort.Otp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Yort.Otp.OnetimePasswordGeneratorBase
  commentId: T:Yort.Otp.OnetimePasswordGeneratorBase
  parent: Yort.Otp
  isExternal: false
  name: OnetimePasswordGeneratorBase
  nameWithType: OnetimePasswordGeneratorBase
  fullName: Yort.Otp.OnetimePasswordGeneratorBase
- uid: Yort.Otp.IOnetimePasswordGenerator
  commentId: T:Yort.Otp.IOnetimePasswordGenerator
  parent: Yort.Otp
  isExternal: false
  name: IOnetimePasswordGenerator
  nameWithType: IOnetimePasswordGenerator
  fullName: Yort.Otp.IOnetimePasswordGenerator
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: HashAlgorithm
  nameWithType: OnetimePasswordGeneratorBase.HashAlgorithm
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.HashAlgorithm
- uid: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: IsDisposed
  nameWithType: OnetimePasswordGeneratorBase.IsDisposed
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.IsDisposed
- uid: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: PasswordLength
  nameWithType: OnetimePasswordGeneratorBase.PasswordLength
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.PasswordLength
- uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: OnetimePasswordGeneratorBase.Dispose(Boolean)
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
  spec.csharp:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
    name: Dispose
    nameWithType: OnetimePasswordGeneratorBase.Dispose
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose(System.Boolean)
    name: Dispose
    nameWithType: OnetimePasswordGeneratorBase.Dispose
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: true
  name: SetSecret(Byte[])
  nameWithType: OnetimePasswordGeneratorBase.SetSecret(Byte[])
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
  nameWithType.vb: OnetimePasswordGeneratorBase.SetSecret(Byte())
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte())
  name.vb: SetSecret(Byte())
  spec.csharp:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
    name: SetSecret
    nameWithType: OnetimePasswordGeneratorBase.SetSecret
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret(System.Byte[])
    name: SetSecret
    nameWithType: OnetimePasswordGeneratorBase.SetSecret
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.SetSecret
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  commentId: M:Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: Dispose()
  nameWithType: OnetimePasswordGeneratorBase.Dispose()
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose()
  spec.csharp:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
    name: Dispose
    nameWithType: OnetimePasswordGeneratorBase.Dispose
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
    name: Dispose
    nameWithType: OnetimePasswordGeneratorBase.Dispose
    fullName: Yort.Otp.OnetimePasswordGeneratorBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Otp.TimeBasedPasswordGenerator.#ctor*
  commentId: Overload:Yort.Otp.TimeBasedPasswordGenerator.#ctor
  isExternal: false
  name: TimeBasedPasswordGenerator
  nameWithType: TimeBasedPasswordGenerator.TimeBasedPasswordGenerator
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeBasedPasswordGenerator
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval*
  commentId: Overload:Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  isExternal: false
  name: TimeInterval
  nameWithType: TimeBasedPasswordGenerator.TimeInterval
  fullName: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Yort.Otp.TimeBasedPasswordGenerator.Timestamp*
  commentId: Overload:Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  isExternal: false
  name: Timestamp
  nameWithType: TimeBasedPasswordGenerator.Timestamp
  fullName: Yort.Otp.TimeBasedPasswordGenerator.Timestamp
- uid: System.Nullable{DateTime}
  commentId: T:System.Nullable{DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc*
  commentId: Overload:Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
  isExternal: false
  name: ValidUntilUtc
  nameWithType: TimeBasedPasswordGenerator.ValidUntilUtc
  fullName: Yort.Otp.TimeBasedPasswordGenerator.ValidUntilUtc
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: Yort.Otp.TimeBasedPasswordGenerator.Timestamp
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.Timestamp
- uid: Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
  commentId: P:Yort.Otp.TimeBasedPasswordGenerator.TimeInterval
- uid: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  commentId: P:Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
  parent: Yort.Otp.OnetimePasswordGeneratorBase
  isExternal: false
  name: MovingFactor
  nameWithType: OnetimePasswordGeneratorBase.MovingFactor
  fullName: Yort.Otp.OnetimePasswordGeneratorBase.MovingFactor
- uid: Yort.Otp.TimeBasedPasswordGenerator.MovingFactor*
  commentId: Overload:Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
  isExternal: false
  name: MovingFactor
  nameWithType: TimeBasedPasswordGenerator.MovingFactor
  fullName: Yort.Otp.TimeBasedPasswordGenerator.MovingFactor
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
