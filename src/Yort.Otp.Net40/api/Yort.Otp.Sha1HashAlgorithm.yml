### YamlMime:ManagedReference
items:
- uid: Yort.Otp.Sha1HashAlgorithm
  commentId: T:Yort.Otp.Sha1HashAlgorithm
  id: Sha1HashAlgorithm
  parent: Yort.Otp
  children:
  - Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  - Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  - Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  - Yort.Otp.Sha1HashAlgorithm.Name
  - Yort.Otp.Sha1HashAlgorithm.Name
  - Yort.Otp.Sha1HashAlgorithm.Name
  langs:
  - csharp
  - vb
  name: Sha1HashAlgorithm
  nameWithType: Sha1HashAlgorithm
  fullName: Yort.Otp.Sha1HashAlgorithm
  type: Class
  source:
    id: Sha1HashAlgorithm
    path: ''
    startLine: 2431
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nThe SHA1 hash algorithm wrapped in the <xref href=\"Yort.Otp.IHashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> interface so it can be used across .Net frameworks.\n"
  example: []
  syntax:
    content: 'public class Sha1HashAlgorithm : IHashAlgorithm'
    content.vb: >-
      Public Class Sha1HashAlgorithm
          Implements IHashAlgorithm
  inheritance:
  - System.Object
  implements:
  - Yort.Otp.IHashAlgorithm
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  commentId: M:Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  id: ComputeHash(System.Byte[],System.Byte[])
  parent: Yort.Otp.Sha1HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[], Byte[])
  nameWithType: Sha1HashAlgorithm.ComputeHash(Byte[], Byte[])
  fullName: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[], System.Byte[])
  type: Method
  source:
    id: ComputeHash
    path: ''
    startLine: 786
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nComputes a new hash of <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> usign the <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code> specified.\n"
  example: []
  syntax:
    content: public byte[] ComputeHash(byte[] key, byte[] data)
    parameters:
    - id: key
      type: System.Byte[]
      description: A byte array containing the key (secret) to use to generate a hash.
    - id: data
      type: System.Byte[]
      description: A byte arrasy containing the data to be hashed.
    return:
      type: System.Byte[]
      description: A new byte array containing the hash result.
    content.vb: Public Function ComputeHash(key As Byte(), data As Byte()) As Byte()
  overload: Yort.Otp.Sha1HashAlgorithm.ComputeHash*
  implements:
  - Yort.Otp.IHashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  nameWithType.vb: Sha1HashAlgorithm.ComputeHash(Byte(), Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte(), System.Byte())
  name.vb: ComputeHash(Byte(), Byte())
- uid: Yort.Otp.Sha1HashAlgorithm.Name
  commentId: P:Yort.Otp.Sha1HashAlgorithm.Name
  id: Name
  parent: Yort.Otp.Sha1HashAlgorithm
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Sha1HashAlgorithm.Name
  fullName: Yort.Otp.Sha1HashAlgorithm.Name
  type: Property
  source:
    id: Name
    path: ''
    startLine: 795
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns the string &quot;SHA1&quot;.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Yort.Otp.Sha1HashAlgorithm.Name*
  implements:
  - Yort.Otp.IHashAlgorithm.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  commentId: M:Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  id: ComputeHash(System.Byte[],System.Byte[])
  parent: Yort.Otp.Sha1HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[], Byte[])
  nameWithType: Sha1HashAlgorithm.ComputeHash(Byte[], Byte[])
  fullName: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[], System.Byte[])
  type: Method
  source:
    id: ComputeHash
    path: ''
    startLine: 1156
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nComputes a new hash of <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> usign the <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code> specified.\n"
  example: []
  syntax:
    content: public byte[] ComputeHash(byte[] key, byte[] data)
    parameters:
    - id: key
      type: System.Byte[]
      description: A byte array containing the key (secret) to use to generate a hash.
    - id: data
      type: System.Byte[]
      description: A byte arrasy containing the data to be hashed.
    return:
      type: System.Byte[]
      description: A new byte array containing the hash result.
    content.vb: Public Function ComputeHash(key As Byte(), data As Byte()) As Byte()
  overload: Yort.Otp.Sha1HashAlgorithm.ComputeHash*
  nameWithType.vb: Sha1HashAlgorithm.ComputeHash(Byte(), Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte(), System.Byte())
  name.vb: ComputeHash(Byte(), Byte())
- uid: Yort.Otp.Sha1HashAlgorithm.Name
  commentId: P:Yort.Otp.Sha1HashAlgorithm.Name
  id: Name
  parent: Yort.Otp.Sha1HashAlgorithm
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Sha1HashAlgorithm.Name
  fullName: Yort.Otp.Sha1HashAlgorithm.Name
  type: Property
  source:
    id: Name
    path: ''
    startLine: 1167
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns the string &quot;SHA1&quot;.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Yort.Otp.Sha1HashAlgorithm.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  commentId: M:Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  id: ComputeHash(System.Byte[],System.Byte[])
  parent: Yort.Otp.Sha1HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[], Byte[])
  nameWithType: Sha1HashAlgorithm.ComputeHash(Byte[], Byte[])
  fullName: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte[], System.Byte[])
  type: Method
  source:
    id: ComputeHash
    path: ''
    startLine: 2442
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nComputes a new hash of <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> usign the <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code> specified.\n"
  example: []
  syntax:
    content: public byte[] ComputeHash(byte[] key, byte[] data)
    parameters:
    - id: key
      type: System.Byte[]
      description: A byte array containing the key (secret) to use to generate a hash.
    - id: data
      type: System.Byte[]
      description: A byte arrasy containing the data to be hashed.
    return:
      type: System.Byte[]
      description: A new byte array containing the hash result.
    content.vb: Public Function ComputeHash(key As Byte(), data As Byte()) As Byte()
  overload: Yort.Otp.Sha1HashAlgorithm.ComputeHash*
  nameWithType.vb: Sha1HashAlgorithm.ComputeHash(Byte(), Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.Sha1HashAlgorithm.ComputeHash(System.Byte(), System.Byte())
  name.vb: ComputeHash(Byte(), Byte())
- uid: Yort.Otp.Sha1HashAlgorithm.Name
  commentId: P:Yort.Otp.Sha1HashAlgorithm.Name
  id: Name
  parent: Yort.Otp.Sha1HashAlgorithm
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Sha1HashAlgorithm.Name
  fullName: Yort.Otp.Sha1HashAlgorithm.Name
  type: Property
  source:
    id: Name
    path: ''
    startLine: 2460
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns the string &quot;SHA1&quot;.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Yort.Otp.Sha1HashAlgorithm.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Yort.Otp.IHashAlgorithm
  commentId: T:Yort.Otp.IHashAlgorithm
  parent: Yort.Otp
  isExternal: false
  name: IHashAlgorithm
  nameWithType: IHashAlgorithm
  fullName: Yort.Otp.IHashAlgorithm
- uid: Yort.Otp
  commentId: N:Yort.Otp
  isExternal: false
  name: Yort.Otp
  nameWithType: Yort.Otp
  fullName: Yort.Otp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Otp.Sha1HashAlgorithm.ComputeHash*
  commentId: Overload:Yort.Otp.Sha1HashAlgorithm.ComputeHash
  isExternal: false
  name: ComputeHash
  nameWithType: Sha1HashAlgorithm.ComputeHash
  fullName: Yort.Otp.Sha1HashAlgorithm.ComputeHash
- uid: Yort.Otp.IHashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  commentId: M:Yort.Otp.IHashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
  parent: Yort.Otp.IHashAlgorithm
  isExternal: true
  name: ComputeHash(Byte[], Byte[])
  nameWithType: IHashAlgorithm.ComputeHash(Byte[], Byte[])
  fullName: Yort.Otp.IHashAlgorithm.ComputeHash(System.Byte[], System.Byte[])
  nameWithType.vb: IHashAlgorithm.ComputeHash(Byte(), Byte())
  fullName.vb: Yort.Otp.IHashAlgorithm.ComputeHash(System.Byte(), System.Byte())
  name.vb: ComputeHash(Byte(), Byte())
  spec.csharp:
  - uid: Yort.Otp.IHashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
    name: ComputeHash
    nameWithType: IHashAlgorithm.ComputeHash
    fullName: Yort.Otp.IHashAlgorithm.ComputeHash
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Otp.IHashAlgorithm.ComputeHash(System.Byte[],System.Byte[])
    name: ComputeHash
    nameWithType: IHashAlgorithm.ComputeHash
    fullName: Yort.Otp.IHashAlgorithm.ComputeHash
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Yort.Otp.Sha1HashAlgorithm.Name*
  commentId: Overload:Yort.Otp.Sha1HashAlgorithm.Name
  isExternal: false
  name: Name
  nameWithType: Sha1HashAlgorithm.Name
  fullName: Yort.Otp.Sha1HashAlgorithm.Name
- uid: Yort.Otp.IHashAlgorithm.Name
  commentId: P:Yort.Otp.IHashAlgorithm.Name
  parent: Yort.Otp.IHashAlgorithm
  isExternal: false
  name: Name
  nameWithType: IHashAlgorithm.Name
  fullName: Yort.Otp.IHashAlgorithm.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
