### YamlMime:ManagedReference
items:
- uid: Yort.Otp.OnetimePasswordGeneratorFactory
  commentId: T:Yort.Otp.OnetimePasswordGeneratorFactory
  id: OnetimePasswordGeneratorFactory
  parent: Yort.Otp
  children:
  - Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32)
  - Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32)
  - Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32,TimeSpan)
  - Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32,TimeSpan)
  - Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[])
  - Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[])
  - Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[],Int64)
  - Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[],Int64)
  - Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
  - Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
  - Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  - Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  - Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  - Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  langs:
  - csharp
  - vb
  name: OnetimePasswordGeneratorFactory
  nameWithType: OnetimePasswordGeneratorFactory
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory
  type: Class
  source:
    id: OnetimePasswordGeneratorFactory
    path: ''
    startLine: 1863
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nFactory that makes instantiating and configuring onetime password generators more concise.\nAlso provides methods for creating password generators from otp urls, and generating new urls.\n"
  example: []
  syntax:
    content: public class OnetimePasswordGeneratorFactory
    content.vb: Public Class OnetimePasswordGeneratorFactory
  seealso:
  - linkId: Yort.Otp.TimeBasedPasswordGenerator
    commentId: T:Yort.Otp.TimeBasedPasswordGenerator
  - linkId: Yort.Otp.CounterBasedPasswordGenerator
    commentId: T:Yort.Otp.CounterBasedPasswordGenerator
  - linkId: Yort.Otp.TimeBasedPasswordGenerator
    commentId: T:Yort.Otp.TimeBasedPasswordGenerator
  - linkId: Yort.Otp.CounterBasedPasswordGenerator
    commentId: T:Yort.Otp.CounterBasedPasswordGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32)
  id: CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32)
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: CreateFactory(Boolean, IHashAlgorithm, Int32)
  nameWithType: OnetimePasswordGeneratorFactory.CreateFactory(Boolean, IHashAlgorithm, Int32)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean, Yort.Otp.IHashAlgorithm, System.Int32)
  type: Method
  source:
    id: CreateFactory
    path: ''
    startLine: 597
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a factory instance that creates pre-configured <xref href=\"Yort.Otp.CounterBasedPasswordGenerator\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
  example: []
  syntax:
    content: public static OnetimePasswordGeneratorFactory CreateFactory(bool eraseSecrets, IHashAlgorithm hashAlgorithm, int passwordLength)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: True if the secrets provided to the generated <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances should be overwritten in memory when the generator is disposed.
    - id: hashAlgorithm
      type: Yort.Otp.IHashAlgorithm
      description: A <xref href="Yort.Otp.IHashAlgorithm" data-throw-if-not-resolved="false"></xref> implementation that will be used by the <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances to generate passwords.
    - id: passwordLength
      type: System.Int32
      description: The number of digits in the generated passwords, default is 6, usual values are 6 or 8.
    return:
      type: Yort.Otp.OnetimePasswordGeneratorFactory
      description: A <xref href="Yort.Otp.OnetimePasswordGeneratorFactory" data-throw-if-not-resolved="false"></xref> instance that can be used to create <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances.
    content.vb: Public Shared Function CreateFactory(eraseSecrets As Boolean, hashAlgorithm As IHashAlgorithm, passwordLength As Integer) As OnetimePasswordGeneratorFactory
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory
    commentId: T:Yort.Otp.OnetimePasswordGeneratorFactory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32,TimeSpan)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32,TimeSpan)
  id: CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32,TimeSpan)
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: CreateFactory(Boolean, IHashAlgorithm, Int32, TimeSpan)
  nameWithType: OnetimePasswordGeneratorFactory.CreateFactory(Boolean, IHashAlgorithm, Int32, TimeSpan)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean, Yort.Otp.IHashAlgorithm, System.Int32, TimeSpan)
  type: Method
  source:
    id: CreateFactory
    path: ''
    startLine: 612
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a factory instance that creates pre-configured <xref href=\"Yort.Otp.TimeBasedPasswordGenerator\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
  example: []
  syntax:
    content: public static OnetimePasswordGeneratorFactory CreateFactory(bool eraseSecrets, IHashAlgorithm hashAlgorithm, int passwordLength, TimeSpan timeInterval)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: True if the secrets provided to the generated <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances should be overwritten in memory when the generator is disposed.
    - id: hashAlgorithm
      type: Yort.Otp.IHashAlgorithm
      description: A <xref href="Yort.Otp.IHashAlgorithm" data-throw-if-not-resolved="false"></xref> implementation that will be used by the <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances to generate passwords.
    - id: passwordLength
      type: System.Int32
      description: The number of digits in the generated passwords, default is 6, usual values are 6 or 8.
    - id: timeInterval
      type: TimeSpan
      description: The interval for which each password is valid, the default is 30 seconds.
    return:
      type: Yort.Otp.OnetimePasswordGeneratorFactory
      description: A <xref href="Yort.Otp.OnetimePasswordGeneratorFactory" data-throw-if-not-resolved="false"></xref> instance that can be used to create <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances.
    content.vb: Public Shared Function CreateFactory(eraseSecrets As Boolean, hashAlgorithm As IHashAlgorithm, passwordLength As Integer, timeInterval As TimeSpan) As OnetimePasswordGeneratorFactory
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory*
  seealso:
  - linkId: Yort.Otp.TimeBasedPasswordGenerator
    commentId: T:Yort.Otp.TimeBasedPasswordGenerator
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
  id: FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: FromOtpUrl(Uri, out String, out Byte[], out IDictionary<String, String>)
  nameWithType: OnetimePasswordGeneratorFactory.FromOtpUrl(Uri, out String, out Byte[], out IDictionary<String, String>)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri, out System.String, out System.Byte[], out IDictionary<System.String, System.String>)
  type: Method
  source:
    id: FromOtpUrl
    path: ''
    startLine: 631
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nCreates either a <xref href=\"Yort.Otp.TimeBasedPasswordGenerator\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Yort.Otp.CounterBasedPasswordGenerator\" data-throw-if-not-resolved=\"false\"></xref> instance pre-configured with values from an otp style uri.\n"
  remarks: "\nSee https://github.com/google/google-authenticator/tree/master/mobile/ios for details of the uri format.\n"
  example: []
  syntax:
    content: public static IOnetimePasswordGenerator FromOtpUrl(Uri url, out string label, out byte[] secret, out IDictionary<string, string> metadata)
    parameters:
    - id: url
      type: Uri
      description: The url to parse and turn into a password generator.
    - id: label
      type: System.String
      description: An out parameter returning the name of the account or resource accessed using the generated passwords.
    - id: secret
      type: System.Byte[]
      description: An out paramete returning the secret used by the generator.
    - id: metadata
      type: IDictionary{System.String,System.String}
      description: A dictionary containing additional metadata retrieved from the URL.
    return:
      type: Yort.Otp.IOnetimePasswordGenerator
      description: A pre-configured instance of either a <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> or <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FromOtpUrl(url As Uri, ByRef label As String, ByRef secret As Byte(), ByRef metadata As IDictionary(Of String, String)) As IOnetimePasswordGenerator
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
    commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
    commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  nameWithType.vb: OnetimePasswordGeneratorFactory.FromOtpUrl(Uri, ByRef String, ByRef Byte(), ByRef IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri, ByRef System.String, ByRef System.Byte(), ByRef IDictionary(Of System.String, System.String))
  name.vb: FromOtpUrl(Uri, ByRef String, ByRef Byte(), ByRef IDictionary(Of String, String))
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  id: GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: GetOtpUrl(String, String, Int32, Byte[], Int64, IDictionary<String, String>)
  nameWithType: OnetimePasswordGeneratorFactory.GetOtpUrl(String, String, Int32, Byte[], Int64, IDictionary<String, String>)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String, System.String, System.Int32, System.Byte[], Int64, IDictionary<System.String, System.String>)
  type: Method
  source:
    id: GetOtpUrl
    path: ''
    startLine: 651
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nCreates a new <seealso cref=\"!:System.Uri\"></seealso> that can be used to configure an authentication app. These codes are normally used as the content of a QR code.\n"
  example: []
  syntax:
    content: public static Uri GetOtpUrl(string label, string algorithmName, int passwordLength, byte[] secret, Int64 counter, IDictionary<string, string> metadata)
    parameters:
    - id: label
      type: System.String
      description: The name of the account or resource protected by this secret.
    - id: algorithmName
      type: System.String
      description: The name of the algorithm used with the secret to generate passwords.
    - id: passwordLength
      type: System.Int32
      description: The length of the password, default is 6, usual values are 6 or 8.
    - id: secret
      type: System.Byte[]
      description: The secret used to protect this account.
    - id: counter
      type: Int64
      description: The initial counter to use when generating passwords for this account.
    - id: metadata
      type: IDictionary{System.String,System.String}
      description: A dictionary containing additional key value pairs to be encoded into the url.
    return:
      type: Uri
      description: A new <seealso cref="!:System.Uri"></seealso> that can be used to configure an authentication app to generate compatible passwords.
    content.vb: Public Shared Function GetOtpUrl(label As String, algorithmName As String, passwordLength As Integer, secret As Byte(), counter As Int64, metadata As IDictionary(Of String, String)) As Uri
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
    commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
  nameWithType.vb: OnetimePasswordGeneratorFactory.GetOtpUrl(String, String, Int32, Byte(), Int64, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String, System.String, System.Int32, System.Byte(), Int64, IDictionary(Of System.String, System.String))
  name.vb: GetOtpUrl(String, String, Int32, Byte(), Int64, IDictionary(Of String, String))
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  id: GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: GetOtpUrl(String, String, Int32, Byte[], TimeSpan, IDictionary<String, String>)
  nameWithType: OnetimePasswordGeneratorFactory.GetOtpUrl(String, String, Int32, Byte[], TimeSpan, IDictionary<String, String>)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String, System.String, System.Int32, System.Byte[], TimeSpan, IDictionary<System.String, System.String>)
  type: Method
  source:
    id: GetOtpUrl
    path: ''
    startLine: 668
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nCreates a new <seealso cref=\"!:System.Uri\"></seealso> that can be used to configure an authentication app. These codes are normally used as the content of a QR code.\n"
  example: []
  syntax:
    content: public static Uri GetOtpUrl(string label, string algorithmName, int passwordLength, byte[] secret, TimeSpan timeInterval, IDictionary<string, string> metadata)
    parameters:
    - id: label
      type: System.String
      description: The name of the account or resource protected by this secret.
    - id: algorithmName
      type: System.String
      description: The name of the algorithm used with the secret to generate passwords.
    - id: passwordLength
      type: System.Int32
      description: The length of the password, default is 6, usual values are 6 or 8.
    - id: secret
      type: System.Byte[]
      description: The secret used to protect this account.
    - id: timeInterval
      type: TimeSpan
      description: The time interval each generated password if valid for. Default value is 30.
    - id: metadata
      type: IDictionary{System.String,System.String}
      description: A dictionary containing additional key value pairs to be encoded into the url.
    return:
      type: Uri
      description: ''
    content.vb: Public Shared Function GetOtpUrl(label As String, algorithmName As String, passwordLength As Integer, secret As Byte(), timeInterval As TimeSpan, metadata As IDictionary(Of String, String)) As Uri
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
    commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
  nameWithType.vb: OnetimePasswordGeneratorFactory.GetOtpUrl(String, String, Int32, Byte(), TimeSpan, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String, System.String, System.Int32, System.Byte(), TimeSpan, IDictionary(Of System.String, System.String))
  name.vb: GetOtpUrl(String, String, Int32, Byte(), TimeSpan, IDictionary(Of String, String))
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[])
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[])
  id: CreateNewPasswordGenerator(System.Byte[])
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: CreateNewPasswordGenerator(Byte[])
  nameWithType: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(Byte[])
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[])
  type: Method
  source:
    id: CreateNewPasswordGenerator
    path: ''
    startLine: 688
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a time based password generator.\n"
  example: []
  syntax:
    content: public IOnetimePasswordGenerator CreateNewPasswordGenerator(byte[] secret)
    parameters:
    - id: secret
      type: System.Byte[]
      description: The secret to use for the new password generator.
    return:
      type: Yort.Otp.IOnetimePasswordGenerator
      description: A pre-configured <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Function CreateNewPasswordGenerator(secret As Byte()) As IOnetimePasswordGenerator
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator*
  nameWithType.vb: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte())
  name.vb: CreateNewPasswordGenerator(Byte())
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[],Int64)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[],Int64)
  id: CreateNewPasswordGenerator(System.Byte[],Int64)
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: CreateNewPasswordGenerator(Byte[], Int64)
  nameWithType: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(Byte[], Int64)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[], Int64)
  type: Method
  source:
    id: CreateNewPasswordGenerator
    path: ''
    startLine: 700
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a counter based password generator.\n"
  example: []
  syntax:
    content: public IOnetimePasswordGenerator CreateNewPasswordGenerator(byte[] secret, Int64 counter)
    parameters:
    - id: secret
      type: System.Byte[]
      description: The secret to use for the new password generator.
    - id: counter
      type: Int64
      description: The current counter to use for the new password  generator.
    return:
      type: Yort.Otp.IOnetimePasswordGenerator
      description: A pre-configured <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Function CreateNewPasswordGenerator(secret As Byte(), counter As Int64) As IOnetimePasswordGenerator
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator*
  nameWithType.vb: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(Byte(), Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte(), Int64)
  name.vb: CreateNewPasswordGenerator(Byte(), Int64)
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32)
  id: CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32)
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: CreateFactory(Boolean, IHashAlgorithm, Int32)
  nameWithType: OnetimePasswordGeneratorFactory.CreateFactory(Boolean, IHashAlgorithm, Int32)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean, Yort.Otp.IHashAlgorithm, System.Int32)
  type: Method
  source:
    id: CreateFactory
    path: ''
    startLine: 1876
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a factory instance that creates pre-configured <xref href=\"Yort.Otp.CounterBasedPasswordGenerator\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
  example: []
  syntax:
    content: public static OnetimePasswordGeneratorFactory CreateFactory(bool eraseSecrets, IHashAlgorithm hashAlgorithm, int passwordLength)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: True if the secrets provided to the generated <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances should be overwritten in memory when the generator is disposed.
    - id: hashAlgorithm
      type: Yort.Otp.IHashAlgorithm
      description: A <xref href="Yort.Otp.IHashAlgorithm" data-throw-if-not-resolved="false"></xref> implementation that will be used by the <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances to generate passwords.
    - id: passwordLength
      type: System.Int32
      description: The number of digits in the generated passwords, default is 6, usual values are 6 or 8.
    return:
      type: Yort.Otp.OnetimePasswordGeneratorFactory
      description: A <xref href="Yort.Otp.OnetimePasswordGeneratorFactory" data-throw-if-not-resolved="false"></xref> instance that can be used to create <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances.
    content.vb: Public Shared Function CreateFactory(eraseSecrets As Boolean, hashAlgorithm As IHashAlgorithm, passwordLength As Integer) As OnetimePasswordGeneratorFactory
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory
    commentId: T:Yort.Otp.OnetimePasswordGeneratorFactory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32,TimeSpan)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32,TimeSpan)
  id: CreateFactory(System.Boolean,Yort.Otp.IHashAlgorithm,System.Int32,TimeSpan)
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: CreateFactory(Boolean, IHashAlgorithm, Int32, TimeSpan)
  nameWithType: OnetimePasswordGeneratorFactory.CreateFactory(Boolean, IHashAlgorithm, Int32, TimeSpan)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory(System.Boolean, Yort.Otp.IHashAlgorithm, System.Int32, TimeSpan)
  type: Method
  source:
    id: CreateFactory
    path: ''
    startLine: 1890
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a factory instance that creates pre-configured <xref href=\"Yort.Otp.TimeBasedPasswordGenerator\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
  example: []
  syntax:
    content: public static OnetimePasswordGeneratorFactory CreateFactory(bool eraseSecrets, IHashAlgorithm hashAlgorithm, int passwordLength, TimeSpan timeInterval)
    parameters:
    - id: eraseSecrets
      type: System.Boolean
      description: True if the secrets provided to the generated <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances should be overwritten in memory when the generator is disposed.
    - id: hashAlgorithm
      type: Yort.Otp.IHashAlgorithm
      description: A <xref href="Yort.Otp.IHashAlgorithm" data-throw-if-not-resolved="false"></xref> implementation that will be used by the <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances to generate passwords.
    - id: passwordLength
      type: System.Int32
      description: The number of digits in the generated passwords, default is 6, usual values are 6 or 8.
    - id: timeInterval
      type: TimeSpan
      description: The interval for which each password is valid, the default is 30 seconds.
    return:
      type: Yort.Otp.OnetimePasswordGeneratorFactory
      description: A <xref href="Yort.Otp.OnetimePasswordGeneratorFactory" data-throw-if-not-resolved="false"></xref> instance that can be used to create <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instances.
    content.vb: Public Shared Function CreateFactory(eraseSecrets As Boolean, hashAlgorithm As IHashAlgorithm, passwordLength As Integer, timeInterval As TimeSpan) As OnetimePasswordGeneratorFactory
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory*
  seealso:
  - linkId: Yort.Otp.TimeBasedPasswordGenerator
    commentId: T:Yort.Otp.TimeBasedPasswordGenerator
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
  id: FromOtpUrl(Uri)
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: FromOtpUrl(Uri)
  nameWithType: OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
  type: Method
  source:
    id: FromOtpUrl
    path: ''
    startLine: 1905
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nCreates either a <xref href=\"Yort.Otp.TimeBasedPasswordGenerator\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Yort.Otp.CounterBasedPasswordGenerator\" data-throw-if-not-resolved=\"false\"></xref> instance pre-configured with values from an otp style uri.\n"
  remarks: "\nSee https://github.com/google/google-authenticator/wiki/Key-Uri-Format for details of the uri format.\n"
  example: []
  syntax:
    content: public static OnetimePasswordAccount FromOtpUrl(Uri url)
    parameters:
    - id: url
      type: Uri
      description: The url to parse and turn into a password generator.
    return:
      type: Yort.Otp.OnetimePasswordAccount
      description: A pre-configured instance of either a <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> or <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FromOtpUrl(url As Uri) As OnetimePasswordAccount
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
    commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  id: GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: GetOtpUrl(String, String, Int32, Byte[], Int64, IDictionary<String, String>)
  nameWithType: OnetimePasswordGeneratorFactory.GetOtpUrl(String, String, Int32, Byte[], Int64, IDictionary<String, String>)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String, System.String, System.Int32, System.Byte[], Int64, IDictionary<System.String, System.String>)
  type: Method
  source:
    id: GetOtpUrl
    path: ''
    startLine: 1987
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nCreates a new <seealso cref=\"!:System.Uri\"></seealso> that can be used to configure an authentication app. These codes are normally used as the content of a QR code.\n"
  example: []
  syntax:
    content: public static Uri GetOtpUrl(string label, string algorithmName, int passwordLength, byte[] secret, Int64 counter, IDictionary<string, string> metadata)
    parameters:
    - id: label
      type: System.String
      description: The name of the account or resource protected by this secret.
    - id: algorithmName
      type: System.String
      description: The name of the algorithm used with the secret to generate passwords.
    - id: passwordLength
      type: System.Int32
      description: The length of the password, default is 6, usual values are 6 or 8.
    - id: secret
      type: System.Byte[]
      description: The secret used to protect this account.
    - id: counter
      type: Int64
      description: The initial counter to use when generating passwords for this account.
    - id: metadata
      type: IDictionary{System.String,System.String}
      description: A dictionary containing additional metadata to be encoded into the url. If this value is null or empty, no additional values are added.
    return:
      type: Uri
      description: A new <seealso cref="!:System.Uri"></seealso> that can be used to configure an authentication app to generate compatible passwords.
    content.vb: Public Shared Function GetOtpUrl(label As String, algorithmName As String, passwordLength As Integer, secret As Byte(), counter As Int64, metadata As IDictionary(Of String, String)) As Uri
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
    commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
  nameWithType.vb: OnetimePasswordGeneratorFactory.GetOtpUrl(String, String, Int32, Byte(), Int64, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String, System.String, System.Int32, System.Byte(), Int64, IDictionary(Of System.String, System.String))
  name.vb: GetOtpUrl(String, String, Int32, Byte(), Int64, IDictionary(Of String, String))
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  id: GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: GetOtpUrl(String, String, Int32, Byte[], TimeSpan, IDictionary<String, String>)
  nameWithType: OnetimePasswordGeneratorFactory.GetOtpUrl(String, String, Int32, Byte[], TimeSpan, IDictionary<String, String>)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String, System.String, System.Int32, System.Byte[], TimeSpan, IDictionary<System.String, System.String>)
  type: Method
  source:
    id: GetOtpUrl
    path: ''
    startLine: 2003
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nCreates a new <seealso cref=\"!:System.Uri\"></seealso> that can be used to configure an authentication app. These codes are normally used as the content of a QR code.\n"
  example: []
  syntax:
    content: public static Uri GetOtpUrl(string label, string algorithmName, int passwordLength, byte[] secret, TimeSpan timeInterval, IDictionary<string, string> metadata)
    parameters:
    - id: label
      type: System.String
      description: The name of the account or resource protected by this secret.
    - id: algorithmName
      type: System.String
      description: The name of the algorithm used with the secret to generate passwords.
    - id: passwordLength
      type: System.Int32
      description: The length of the password, default is 6, usual values are 6 or 8.
    - id: secret
      type: System.Byte[]
      description: The secret used to protect this account.
    - id: timeInterval
      type: TimeSpan
      description: The time interval each generated password if valid for. Default value is 30.
    - id: metadata
      type: IDictionary{System.String,System.String}
      description: A dictionary containing additional metadata to be encoded into the url. If this value is null or empty, no additional values are added.
    return:
      type: Uri
      description: A new <seealso cref="!:System.Uri"></seealso> that can be used to configure an authentication app to generate compatible passwords.
    content.vb: Public Shared Function GetOtpUrl(label As String, algorithmName As String, passwordLength As Integer, secret As Byte(), timeInterval As TimeSpan, metadata As IDictionary(Of String, String)) As Uri
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl*
  seealso:
  - linkId: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
    commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
  nameWithType.vb: OnetimePasswordGeneratorFactory.GetOtpUrl(String, String, Int32, Byte(), TimeSpan, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String, System.String, System.Int32, System.Byte(), TimeSpan, IDictionary(Of System.String, System.String))
  name.vb: GetOtpUrl(String, String, Int32, Byte(), TimeSpan, IDictionary(Of String, String))
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[])
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[])
  id: CreateNewPasswordGenerator(System.Byte[])
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: CreateNewPasswordGenerator(Byte[])
  nameWithType: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(Byte[])
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[])
  type: Method
  source:
    id: CreateNewPasswordGenerator
    path: ''
    startLine: 2094
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a time based password generator.\n"
  example: []
  syntax:
    content: public IOnetimePasswordGenerator CreateNewPasswordGenerator(byte[] secret)
    parameters:
    - id: secret
      type: System.Byte[]
      description: The secret to use for the new password generator.
    return:
      type: Yort.Otp.IOnetimePasswordGenerator
      description: A pre-configured <xref href="Yort.Otp.TimeBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Function CreateNewPasswordGenerator(secret As Byte()) As IOnetimePasswordGenerator
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator*
  nameWithType.vb: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte())
  name.vb: CreateNewPasswordGenerator(Byte())
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[],Int64)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[],Int64)
  id: CreateNewPasswordGenerator(System.Byte[],Int64)
  parent: Yort.Otp.OnetimePasswordGeneratorFactory
  langs:
  - csharp
  - vb
  name: CreateNewPasswordGenerator(Byte[], Int64)
  nameWithType: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(Byte[], Int64)
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte[], Int64)
  type: Method
  source:
    id: CreateNewPasswordGenerator
    path: ''
    startLine: 2105
  assemblies:
  - cs.temp.dll
  namespace: Yort.Otp
  summary: "\nReturns a counter based password generator.\n"
  example: []
  syntax:
    content: public IOnetimePasswordGenerator CreateNewPasswordGenerator(byte[] secret, Int64 counter)
    parameters:
    - id: secret
      type: System.Byte[]
      description: The secret to use for the new password generator.
    - id: counter
      type: Int64
      description: The current counter to use for the new password  generator.
    return:
      type: Yort.Otp.IOnetimePasswordGenerator
      description: A pre-configured <xref href="Yort.Otp.CounterBasedPasswordGenerator" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Function CreateNewPasswordGenerator(secret As Byte(), counter As Int64) As IOnetimePasswordGenerator
  overload: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator*
  nameWithType.vb: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(Byte(), Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator(System.Byte(), Int64)
  name.vb: CreateNewPasswordGenerator(Byte(), Int64)
references:
- uid: Yort.Otp.TimeBasedPasswordGenerator
  commentId: T:Yort.Otp.TimeBasedPasswordGenerator
  isExternal: false
  name: TimeBasedPasswordGenerator
  nameWithType: TimeBasedPasswordGenerator
  fullName: Yort.Otp.TimeBasedPasswordGenerator
- uid: Yort.Otp.CounterBasedPasswordGenerator
  commentId: T:Yort.Otp.CounterBasedPasswordGenerator
  isExternal: false
  name: CounterBasedPasswordGenerator
  nameWithType: CounterBasedPasswordGenerator
  fullName: Yort.Otp.CounterBasedPasswordGenerator
- uid: Yort.Otp
  commentId: N:Yort.Otp
  isExternal: false
  name: Yort.Otp
  nameWithType: Yort.Otp
  fullName: Yort.Otp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Otp.IHashAlgorithm
  commentId: T:Yort.Otp.IHashAlgorithm
  parent: Yort.Otp
  isExternal: false
  name: IHashAlgorithm
  nameWithType: IHashAlgorithm
  fullName: Yort.Otp.IHashAlgorithm
- uid: Yort.Otp.OnetimePasswordGeneratorFactory
  commentId: T:Yort.Otp.OnetimePasswordGeneratorFactory
  parent: Yort.Otp
  isExternal: false
  name: OnetimePasswordGeneratorFactory
  nameWithType: OnetimePasswordGeneratorFactory
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory
  isExternal: false
  name: CreateFactory
  nameWithType: OnetimePasswordGeneratorFactory.CreateFactory
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateFactory
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],Int64,IDictionary{System.String,System.String})
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl(System.String,System.String,System.Int32,System.Byte[],TimeSpan,IDictionary{System.String,System.String})
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl
  isExternal: false
  name: FromOtpUrl
  nameWithType: OnetimePasswordGeneratorFactory.FromOtpUrl
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: IDictionary{System.String,System.String}
  commentId: '!:IDictionary{System.String,System.String}'
  definition: IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Otp.IOnetimePasswordGenerator
  commentId: T:Yort.Otp.IOnetimePasswordGenerator
  parent: Yort.Otp
  isExternal: false
  name: IOnetimePasswordGenerator
  nameWithType: IOnetimePasswordGenerator
  fullName: Yort.Otp.IOnetimePasswordGenerator
- uid: IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri,System.String@,System.Byte[]@,IDictionary{System.String,System.String}@)
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl
  isExternal: false
  name: GetOtpUrl
  nameWithType: OnetimePasswordGeneratorFactory.GetOtpUrl
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.GetOtpUrl
- uid: Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: Int64
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator*
  commentId: Overload:Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator
  isExternal: false
  name: CreateNewPasswordGenerator
  nameWithType: OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator
  fullName: Yort.Otp.OnetimePasswordGeneratorFactory.CreateNewPasswordGenerator
- uid: Yort.Otp.OnetimePasswordAccount
  commentId: T:Yort.Otp.OnetimePasswordAccount
  parent: Yort.Otp
  isExternal: false
  name: OnetimePasswordAccount
  nameWithType: OnetimePasswordAccount
  fullName: Yort.Otp.OnetimePasswordAccount
- uid: Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
  commentId: M:Yort.Otp.OnetimePasswordGeneratorFactory.FromOtpUrl(Uri)
